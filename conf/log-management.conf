# AIDIS Centralized Log Management Configuration
# This file defines the logging policies and structure for all AIDIS services

# =============================================================================
# LOG DIRECTORY STRUCTURE
# =============================================================================

LOGS_ROOT="/home/ridgetop/aidis/logs"

# Service-specific log directories
LOGS_MAIN="$LOGS_ROOT"                    # Main service logs
LOGS_ARCHIVE="$LOGS_ROOT/archive"         # Rotated/compressed logs  
LOGS_METRICS="$LOGS_ROOT/metrics"         # Metrics collection logs
LOGS_PATTERNS="$LOGS_ROOT/patterns"       # Pattern detection logs
LOGS_COMPLEXITY="$LOGS_ROOT/complexity"   # Code complexity logs
LOGS_GIT="$LOGS_ROOT/git-tracking"        # Git tracking logs
LOGS_SYSTEM="$LOGS_ROOT/system"           # System/operational logs
LOGS_ERRORS="$LOGS_ROOT/errors"           # Error-specific logs

# =============================================================================
# LOG FILE NAMING CONVENTIONS  
# =============================================================================

# Main service logs
LOG_AIDIS_MAIN="$LOGS_MAIN/aidis.log"
LOG_AIDIS_CORE="$LOGS_MAIN/aidis-core.log"
LOG_HTTP_BRIDGE="$LOGS_MAIN/http-bridge.log"
LOG_MCP_BRIDGE="$LOGS_MAIN/http-mcp-bridge.log"
LOG_MCP_PROXY="$LOGS_MAIN/mcp-proxy.log"

# System operational logs
LOG_MONITORING="$LOGS_SYSTEM/monitoring.log"
LOG_ALERTS="$LOGS_SYSTEM/alerts.log"
LOG_CLEANUP="$LOGS_SYSTEM/cleanup.log"
LOG_ROTATION="$LOGS_SYSTEM/log-rotation.log"
LOG_CRON="$LOGS_SYSTEM/cron.log"

# Performance and metrics logs
LOG_METRICS_COLLECTION="$LOGS_METRICS/collection.log"
LOG_METRICS_PERFORMANCE="$LOGS_METRICS/performance.log"
LOG_METRICS_ALERTS="$LOGS_METRICS/alerts.log"

# Pattern detection logs
LOG_PATTERNS_DETECTION="$LOGS_PATTERNS/detection.log"
LOG_PATTERNS_ANALYSIS="$LOGS_PATTERNS/analysis.log"
LOG_PATTERNS_INSIGHTS="$LOGS_PATTERNS/insights.log"

# Complexity tracking logs
LOG_COMPLEXITY_ANALYSIS="$LOGS_COMPLEXITY/analysis.log"
LOG_COMPLEXITY_TRACKING="$LOGS_COMPLEXITY/tracking.log"
LOG_COMPLEXITY_ALERTS="$LOGS_COMPLEXITY/alerts.log"

# Git tracking logs  
LOG_GIT_COMMITS="$LOGS_GIT/commits.log"
LOG_GIT_CORRELATION="$LOGS_GIT/correlation.log"

# Error logs (kept separate for longer retention)
LOG_ERRORS_CRITICAL="$LOGS_ERRORS/critical.log"
LOG_ERRORS_APPLICATION="$LOGS_ERRORS/application.log"
LOG_ERRORS_DATABASE="$LOGS_ERRORS/database.log"

# =============================================================================
# ROTATION POLICIES
# =============================================================================

# Main service logs - daily rotation, 30 days retention
ROTATION_MAIN_SIZE="50M"
ROTATION_MAIN_FREQUENCY="daily"
ROTATION_MAIN_KEEP="30"

# High-volume service logs - hourly rotation, 1 week retention
ROTATION_HIGHVOL_SIZE="25M" 
ROTATION_HIGHVOL_FREQUENCY="hourly"
ROTATION_HIGHVOL_KEEP="168"

# System logs - daily rotation, 2 weeks retention
ROTATION_SYSTEM_SIZE="25M"
ROTATION_SYSTEM_FREQUENCY="daily"
ROTATION_SYSTEM_KEEP="14"

# Error logs - daily rotation, 3 months retention
ROTATION_ERROR_SIZE="10M"
ROTATION_ERROR_FREQUENCY="daily"
ROTATION_ERROR_KEEP="90"

# =============================================================================
# CLEANUP POLICIES
# =============================================================================

# Automatic cleanup thresholds
CLEANUP_ARCHIVES_DAYS="90"        # Keep archived logs for 90 days
CLEANUP_ROTATED_DAYS="30"         # Keep rotated logs for 30 days
CLEANUP_ERROR_LOGS_DAYS="180"     # Keep error logs for 6 months
CLEANUP_DEBUG_LOGS_DAYS="7"       # Keep debug logs for 1 week

# Size limits
MAX_LOG_FILE_SIZE_MB="500"        # Max size for individual active log
MAX_TOTAL_LOGS_SIZE_GB="5"        # Max total size for all logs
DISK_USAGE_WARNING_GB="3"         # Warning threshold
DISK_USAGE_CRITICAL_GB="4"        # Critical threshold

# =============================================================================
# MONITORING POLICIES
# =============================================================================

# Alert thresholds
MONITOR_ERROR_RATE_PER_MINUTE="5"       # Alert if >5 errors/minute
MONITOR_ALERT_COOLDOWN_MINUTES="30"     # Minimum time between alerts
MONITOR_CHECK_INTERVAL_MINUTES="10"     # How often to check logs

# Service health monitoring
MONITOR_SERVICE_TIMEOUT_MINUTES="5"     # Alert if service down for 5 min
MONITOR_LOG_SILENCE_MINUTES="30"        # Alert if no logs for 30 min

# Performance monitoring
MONITOR_RESPONSE_TIME_MS="5000"         # Alert if responses >5s
MONITOR_MEMORY_USAGE_PERCENT="80"       # Alert if memory >80%
MONITOR_DISK_USAGE_PERCENT="85"         # Alert if disk >85%

# =============================================================================
# LOG ANALYSIS PATTERNS
# =============================================================================

# Error patterns to watch for
ERROR_PATTERNS=(
    "OutOfMemory|Memory.*exhausted"
    "Connection.*refused|Connection.*timeout"
    "Database.*connection.*failed"
    "SIGTERM|SIGKILL|Process.*killed"
    "Permission.*denied"
    "Disk.*full|No space left"
    "ENOENT|File.*not.*found"
    "EACCES|Access.*denied"
    "Stack.*overflow|Segmentation.*fault"
    "Deadlock|Lock.*timeout"
)

# Performance patterns
PERFORMANCE_PATTERNS=(
    "slow|timeout|performance"
    "took.*[0-9]{4,}ms"
    "memory|cpu|load"
    "queue.*full|buffer.*overflow"
    "throttle|rate.*limit"
)

# Security patterns
SECURITY_PATTERNS=(
    "authentication.*failed"
    "authorization.*denied"
    "invalid.*token|expired.*token"
    "brute.*force|too.*many.*attempts"
    "suspicious.*activity"
)

# =============================================================================
# INTEGRATION SETTINGS
# =============================================================================

# External log shipping (if needed)
LOG_SHIPPING_ENABLED="false"
LOG_SHIPPING_ENDPOINT=""
LOG_SHIPPING_FORMAT="json"

# Metrics integration
METRICS_LOG_INTEGRATION="true"
METRICS_EXPORT_INTERVAL_MINUTES="15"

# Alert integration
ALERT_WEBHOOK_URL=""
ALERT_EMAIL_ENABLED="false"
ALERT_EMAIL_RECIPIENTS=""

# =============================================================================
# BACKUP POLICIES
# =============================================================================

# Log backup settings
BACKUP_LOGS_ENABLED="true"
BACKUP_RETENTION_DAYS="365"        # Keep log backups for 1 year
BACKUP_COMPRESS="true"
BACKUP_LOCATION="/home/ridgetop/aidis/backups/logs"

# =============================================================================
# DEVELOPMENT/DEBUG SETTINGS
# =============================================================================

# Debug logging (enable only during development)
DEBUG_LOG_ENABLED="false"
DEBUG_LOG_LEVEL="info"
DEBUG_LOG_FILE="$LOGS_SYSTEM/debug.log"

# Verbose logging for troubleshooting
VERBOSE_LOGGING="false"
TRACE_REQUESTS="false"

# Test mode (prevents actual deletions during testing)
TEST_MODE="false"

# =============================================================================
# HELPER FUNCTIONS (for use in scripts)
# =============================================================================

# Function to ensure all log directories exist
ensure_log_directories() {
    mkdir -p "$LOGS_ROOT" "$LOGS_ARCHIVE" "$LOGS_METRICS" "$LOGS_PATTERNS" \
             "$LOGS_COMPLEXITY" "$LOGS_GIT" "$LOGS_SYSTEM" "$LOGS_ERRORS" \
             "$LOGS_ARCHIVE/metrics" "$LOGS_ARCHIVE/patterns" \
             "$LOGS_ARCHIVE/complexity" "$LOGS_ARCHIVE/git-tracking" \
             "$LOGS_ARCHIVE/system" "$LOGS_ARCHIVE/errors"
}

# Function to set proper permissions
set_log_permissions() {
    find "$LOGS_ROOT" -type d -exec chmod 755 {} \;
    find "$LOGS_ROOT" -type f -name "*.log" -exec chmod 644 {} \;
    find "$LOGS_ROOT" -type f -name "*.gz" -exec chmod 644 {} \;
}

# Function to validate log configuration
validate_log_config() {
    local errors=0
    
    # Check if required directories can be created
    for dir in "$LOGS_ROOT" "$LOGS_ARCHIVE" "$LOGS_METRICS" "$LOGS_PATTERNS" \
               "$LOGS_COMPLEXITY" "$LOGS_GIT" "$LOGS_SYSTEM" "$LOGS_ERRORS"; do
        if ! mkdir -p "$dir" 2>/dev/null; then
            echo "ERROR: Cannot create directory: $dir"
            ((errors++))
        fi
    done
    
    # Check disk space
    local available_gb
    available_gb=$(df -BG "$LOGS_ROOT" | tail -1 | awk '{print $4}' | sed 's/G//')
    if [ "$available_gb" -lt $((MAX_TOTAL_LOGS_SIZE_GB + 1)) ]; then
        echo "WARNING: Limited disk space available (${available_gb}GB)"
    fi
    
    return $errors
}
