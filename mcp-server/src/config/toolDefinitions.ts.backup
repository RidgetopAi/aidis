/**
 * AIDIS Tool Definitions
 * 
 * Shared module containing all 47 AIDIS MCP tool definitions.
 * This module serves as the single source of truth for tool schemas
 * used by both the main MCP server and the HTTP bridge.
 * 
 * Last Updated: 2025-10-01
 */

/**
 * Tool Definition Interface
 * Matches the MCP SDK Tool type structure
 */
export interface ToolDefinition {
  name: string;
  description: string;
  inputSchema: {
    type: 'object';
    properties: Record<string, any>;
    required?: string[];
  };
}

/**
 * Complete array of all 47 AIDIS tool definitions
 */
export const AIDIS_TOOL_DEFINITIONS: ToolDefinition[] = [
          {
            name: 'aidis_ping',
            description: 'Test connectivity to AIDIS server',
            inputSchema: {
              type: 'object',
              properties: {
                message: {
                  type: 'string',
                  description: 'Optional test message',
                  default: 'Hello AIDIS!'
                }
              }
            },
          },
          {
            name: 'aidis_status',
            description: 'Get AIDIS server status and health information',
            inputSchema: {
              type: 'object',
              properties: {},
            },
          },
          {
            name: 'aidis_help',
            description: 'Display categorized list of all AIDIS tools',
            inputSchema: {
              type: 'object',
              properties: {},
            },
          },
          {
            name: 'aidis_explain',
            description: 'Get detailed help for a specific AIDIS tool',
            inputSchema: {
              type: 'object',
              properties: {
                toolName: { type: 'string', description: 'Name of the tool to explain (e.g., "context_search", "project_list")' }
              },
              required: ['toolName']
            },
          },
          {
            name: 'aidis_examples',
            description: 'Get usage examples and patterns for a specific AIDIS tool',
            inputSchema: {
              type: 'object',
              properties: {
                toolName: { type: 'string', description: 'Name of the tool to get examples for (e.g., "context_search", "project_create")' }
              },
              required: ['toolName']
            },
          },
          {
            name: 'context_store',
            description: 'Store development context with automatic embedding generation for semantic search',
            inputSchema: {
              type: 'object',
              properties: {
                content: {
                  type: 'string',
                  description: 'The context content to store (code, decisions, discussions, etc.)'
                },
                type: {
                  type: 'string',
                  enum: ['code', 'decision', 'error', 'discussion', 'planning', 'completion', 'milestone', 'reflections', 'handoff'],
                  description: 'Type of context being stored'
                },
                tags: {
                  type: 'array',
                  items: { type: 'string' },
                  description: 'Optional tags for categorization'
                },
                relevanceScore: {
                  type: 'number',
                  minimum: 0,
                  maximum: 10,
                  description: 'Relevance score (0-10, default: 5)'
                },
                metadata: {
                  type: 'object',
                  description: 'Optional metadata as key-value pairs'
                },
                projectId: {
                  type: 'string',
                  description: 'Optional project ID (uses default if not specified)'
                },
                sessionId: {
                  type: 'string',
                  description: 'Optional session ID for grouping related contexts'
                }
              },
              required: ['content', 'type']
            },
          },
          {
            name: 'context_search',
            description: 'Search stored contexts using semantic similarity and filters',
            inputSchema: {
              type: 'object',
              properties: {
                query: {
                  type: 'string',
                  description: 'Search query (uses semantic similarity matching)'
                },
                type: {
                  type: 'string',
                  enum: ['code', 'decision', 'error', 'discussion', 'planning', 'completion', 'milestone', 'reflections', 'handoff'],
                  description: 'Optional filter by context type'
                },
                tags: {
                  type: 'array',
                  items: { type: 'string' },
                  description: 'Optional filter by tags'
                },
                limit: {
                  type: 'number',
                  minimum: 1,
                  maximum: 50,
                  description: 'Maximum number of results (default: 10)'
                },
                minSimilarity: {
                  type: 'number',
                  minimum: 0,
                  maximum: 100,
                  description: 'Minimum similarity percentage (0-100)'
                },
                projectId: {
                  type: 'string',
                  description: 'Optional project ID filter'
                }
              },
              required: ['query']
            },
          },
          {
            name: 'context_get_recent',
            description: 'Get recent contexts in chronological order (newest first)',
            inputSchema: {
              type: 'object',
              properties: {
                limit: {
                  type: 'number',
                  minimum: 1,
                  maximum: 20,
                  description: 'Maximum number of results (default: 5)'
                },
                projectId: {
                  type: 'string',
                  description: 'Optional project ID (uses current if not specified)'
                }
              },
              required: []
            },
          },
          {
            name: 'context_stats',
            description: 'Get context statistics for a project',
            inputSchema: {
              type: 'object',
              properties: {
                projectId: {
                  type: 'string',
                  description: 'Optional project ID (uses default if not specified)'
                }
              }
            },
          },
          {
            name: 'project_list',
            description: 'List all available projects with statistics',
            inputSchema: {
              type: 'object',
              properties: {
                includeStats: {
                  type: 'boolean',
                  description: 'Include context statistics for each project (default: true)'
                }
              }
            },
          },
          {
            name: 'project_create',
            description: 'Create a new project',
            inputSchema: {
              type: 'object',
              properties: {
                name: {
                  type: 'string',
                  description: 'Unique project name'
                },
                description: {
                  type: 'string',
                  description: 'Optional project description'
                },
                gitRepoUrl: {
                  type: 'string',
                  description: 'Optional Git repository URL'
                },
                rootDirectory: {
                  type: 'string',
                  description: 'Optional root directory path'
                },
                metadata: {
                  type: 'object',
                  description: 'Optional metadata as key-value pairs'
                }
              },
              required: ['name']
            },
          },
          {
            name: 'project_switch',
            description: 'Switch to a different project (sets it as current active project)',
            inputSchema: {
              type: 'object',
              properties: {
                project: {
                  type: 'string',
                  description: 'Project ID or name to switch to'
                }
              },
              required: ['project']
            },
          },
          {
            name: 'project_current',
            description: 'Get the currently active project information',
            inputSchema: {
              type: 'object',
              properties: {}
            },
          },
          {
            name: 'project_info',
            description: 'Get detailed information about a specific project',
            inputSchema: {
              type: 'object',
              properties: {
                project: {
                  type: 'string',
                  description: 'Project ID or name to get information for'
                }
              },
              required: ['project']
            },
          },
          {
            name: 'naming_register',
            description: 'Register a name in the naming registry to prevent conflicts',
            inputSchema: {
              type: 'object',
              properties: {
                entityType: {
                  type: 'string',
                  enum: ['variable', 'function', 'class', 'interface', 'type', 'component', 'file', 'directory', 'module', 'service', 'endpoint', 'database_table', 'database_column', 'config_key', 'environment_var', 'css_class', 'html_id'],
                  description: 'Type of entity being named'
                },
                canonicalName: {
                  type: 'string',
                  description: 'The official name to register'
                },
                description: {
                  type: 'string',
                  description: 'Description of what this entity represents'
                },
                aliases: {
                  type: 'array',
                  items: { type: 'string' },
                  description: 'Alternative names or variations'
                },
                contextTags: {
                  type: 'array',
                  items: { type: 'string' },
                  description: 'Tags for categorization'
                },
                projectId: {
                  type: 'string',
                  description: 'Optional project ID (uses current if not specified)'
                }
              },
              required: ['entityType', 'canonicalName']
            },
          },
          {
            name: 'naming_check',
            description: 'Check for naming conflicts before using a name',
            inputSchema: {
              type: 'object',
              properties: {
                entityType: {
                  type: 'string',
                  enum: ['variable', 'function', 'class', 'interface', 'type', 'component', 'file', 'directory', 'module', 'service', 'endpoint', 'database_table', 'database_column', 'config_key', 'environment_var', 'css_class', 'html_id'],
                  description: 'Type of entity being named'
                },
                proposedName: {
                  type: 'string',
                  description: 'The name you want to check'
                },
                contextTags: {
                  type: 'array',
                  items: { type: 'string' },
                  description: 'Context tags for smarter conflict detection'
                },
                projectId: {
                  type: 'string',
                  description: 'Optional project ID (uses current if not specified)'
                }
              },
              required: ['entityType', 'proposedName']
            },
          },
          {
            name: 'naming_suggest',
            description: 'Get name suggestions based on description and project patterns',
            inputSchema: {
              type: 'object',
              properties: {
                entityType: {
                  type: 'string',
                  enum: ['variable', 'function', 'class', 'interface', 'type', 'component', 'file', 'directory', 'module', 'service', 'endpoint', 'database_table', 'database_column', 'config_key', 'environment_var', 'css_class', 'html_id'],
                  description: 'Type of entity being named'
                },
                description: {
                  type: 'string',
                  description: 'Description of what needs to be named'
                },
                contextTags: {
                  type: 'array',
                  items: { type: 'string' },
                  description: 'Context tags to influence suggestions'
                },
                projectId: {
                  type: 'string',
                  description: 'Optional project ID (uses current if not specified)'
                }
              },
              required: ['entityType', 'description']
            },
          },
          {
            name: 'naming_stats',
            description: 'Get naming statistics and convention compliance for a project',
            inputSchema: {
              type: 'object',
              properties: {
                projectId: {
                  type: 'string',
                  description: 'Optional project ID (uses current if not specified)'
                }
              }
            },
          },
          {
            name: 'decision_record',
            description: 'Record a technical decision with full context and alternatives',
            inputSchema: {
              type: 'object',
              properties: {
                decisionType: {
                  type: 'string',
                  enum: ['architecture', 'library', 'framework', 'pattern', 'api_design', 'database', 'deployment', 'security', 'performance', 'ui_ux', 'testing', 'tooling', 'process', 'naming_convention', 'code_style'],
                  description: 'Type of decision being made'
                },
                title: {
                  type: 'string',
                  description: 'Brief title of the decision'
                },
                description: {
                  type: 'string',
                  description: 'Detailed description of the decision'
                },
                rationale: {
                  type: 'string',
                  description: 'Why this decision was made'
                },
                impactLevel: {
                  type: 'string',
                  enum: ['low', 'medium', 'high', 'critical'],
                  description: 'Impact level of this decision'
                },
                alternativesConsidered: {
                  type: 'array',
                  items: {
                    type: 'object',
                    properties: {
                      name: { type: 'string' },
                      pros: { type: 'array', items: { type: 'string' } },
                      cons: { type: 'array', items: { type: 'string' } },
                      reasonRejected: { type: 'string' }
                    },
                    required: ['name', 'reasonRejected']
                  },
                  description: 'Alternatives that were considered and rejected'
                },
                problemStatement: {
                  type: 'string',
                  description: 'What problem was being solved'
                },
                affectedComponents: {
                  type: 'array',
                  items: { type: 'string' },
                  description: 'Components affected by this decision'
                },
                tags: {
                  type: 'array',
                  items: { type: 'string' },
                  description: 'Tags for categorization'
                },
                projectId: {
                  type: 'string',
                  description: 'Optional project ID (uses current if not specified)'
                }
              },
              required: ['decisionType', 'title', 'description', 'rationale', 'impactLevel']
            },
          },
          {
            name: 'decision_search',
            description: 'Search technical decisions with various filters',
            inputSchema: {
              type: 'object',
              properties: {
                query: {
                  type: 'string',
                  description: 'Text query to search in decision content'
                },
                decisionType: {
                  type: 'string',
                  enum: ['architecture', 'library', 'framework', 'pattern', 'api_design', 'database', 'deployment', 'security', 'performance', 'ui_ux', 'testing', 'tooling', 'process', 'naming_convention', 'code_style'],
                  description: 'Filter by decision type'
                },
                impactLevel: {
                  type: 'string',
                  enum: ['low', 'medium', 'high', 'critical'],
                  description: 'Filter by impact level'
                },
                component: {
                  type: 'string',
                  description: 'Find decisions affecting this component'
                },
                tags: {
                  type: 'array',
                  items: { type: 'string' },
                  description: 'Filter by tags'
                },
                limit: {
                  type: 'number',
                  minimum: 1,
                  maximum: 50,
                  description: 'Maximum number of results (default: 20)'
                },
                projectId: {
                  type: 'string',
                  description: 'Optional project ID (uses current if not specified)'
                }
              }
            },
          },
          {
            name: 'decision_update',
            description: 'Update decision status, outcomes, or lessons learned',
            inputSchema: {
              type: 'object',
              properties: {
                decisionId: {
                  type: 'string',
                  description: 'ID of the decision to update'
                },
                outcomeStatus: {
                  type: 'string',
                  enum: ['unknown', 'successful', 'failed', 'mixed', 'too_early'],
                  description: 'How did this decision turn out?'
                },
                outcomeNotes: {
                  type: 'string',
                  description: 'Notes about the outcome'
                },
                lessonsLearned: {
                  type: 'string',
                  description: 'What was learned from this decision'
                }
              },
              required: ['decisionId']
            },
          },
          {
            name: 'decision_stats',
            description: 'Get technical decision statistics and analysis',
            inputSchema: {
              type: 'object',
              properties: {
                projectId: {
                  type: 'string',
                  description: 'Optional project ID (uses current if not specified)'
                }
              }
            },
          },



          {
            name: 'task_create',
            description: 'Create a new task for agent coordination',
            inputSchema: {
              type: 'object',
              properties: {
                title: {
                  type: 'string',
                  description: 'Task title'
                },
                description: {
                  type: 'string',
                  description: 'Detailed task description'
                },
                type: {
                  type: 'string',
                  description: 'Task type (feature, bugfix, refactor, test, review, documentation)',
                  default: 'general'
                },
                priority: {
                  type: 'string',
                  enum: ['low', 'medium', 'high', 'urgent'],
                  description: 'Task priority',
                  default: 'medium'
                },
                assignedTo: {
                  type: 'string',
                  description: 'Agent ID to assign task to'
                },
                tags: {
                  type: 'array',
                  items: { type: 'string' },
                  description: 'Task tags'
                },
                dependencies: {
                  type: 'array',
                  items: { type: 'string' },
                  description: 'Task IDs this task depends on'
                },
                projectId: {
                  type: 'string',
                  description: 'Optional project ID (uses current if not specified)'
                },
                metadata: {
                  type: 'object',
                  description: 'Additional task metadata'
                }
              },
              required: ['title']
            },
          },
          {
            name: 'task_list',
            description: 'List tasks with optional filtering',
            inputSchema: {
              type: 'object',
              properties: {
                projectId: {
                  type: 'string',
                  description: 'Optional project ID (uses current if not specified)'
                },
                assignedTo: {
                  type: 'string',
                  description: 'Filter by assigned agent ID'
                },
                status: {
                  type: 'string',
                  enum: ['todo', 'in_progress', 'blocked', 'completed', 'cancelled'],
                  description: 'Filter by single task status'
                },
                statuses: {
                  type: 'array',
                  items: {
                    type: 'string',
                    enum: ['todo', 'in_progress', 'blocked', 'completed', 'cancelled']
                  },
                  description: 'Filter by multiple task statuses (takes precedence over status)'
                },
                type: {
                  type: 'string',
                  description: 'Filter by task type'
                },
                tags: {
                  type: 'array',
                  items: {
                    type: 'string'
                  },
                  description: 'Filter by tags (matches ANY of the provided tags)'
                },
                priority: {
                  type: 'string',
                  enum: ['low', 'medium', 'high', 'urgent'],
                  description: 'Filter by priority level'
                },
                phase: {
                  type: 'string',
                  description: 'Filter by phase (looks for "phase-{value}" in tags)'
                }
              }
            },
          },
          {
            name: 'task_update',
            description: 'Update task status and assignment',
            inputSchema: {
              type: 'object',
              properties: {
                taskId: {
                  type: 'string',
                  description: 'Task ID to update'
                },
                status: {
                  type: 'string',
                  enum: ['todo', 'in_progress', 'blocked', 'completed', 'cancelled'],
                  description: 'New task status'
                },
                assignedTo: {
                  type: 'string',
                  description: 'Agent ID to assign/reassign task to'
                },
                metadata: {
                  type: 'object',
                  description: 'Additional task metadata'
                }
              },
              required: ['taskId', 'status']
            },
          },
          {
            name: 'task_details',
            description: 'Get detailed information for a specific task',
            inputSchema: {
              type: 'object',
              properties: {
                taskId: {
                  type: 'string',
                  description: 'Task ID to get details for'
                },
                projectId: {
                  type: 'string', 
                  description: 'Optional project ID (uses current if not specified)'
                }
              },
              required: ['taskId']
            },
          },
          {
            name: 'task_bulk_update',
            description: 'Update multiple tasks atomically with the same changes',
            inputSchema: {
              type: 'object',
              properties: {
                task_ids: {
                  type: 'array',
                  items: {
                    type: 'string'
                  },
                  description: 'Array of task IDs to update'
                },
                status: {
                  type: 'string',
                  enum: ['todo', 'in_progress', 'blocked', 'completed', 'cancelled'],
                  description: 'New status for all specified tasks'
                },
                assignedTo: {
                  type: 'string',
                  description: 'Agent ID to assign all tasks to'
                },
                priority: {
                  type: 'string',
                  enum: ['low', 'medium', 'high', 'urgent'],
                  description: 'New priority for all specified tasks'
                },
                metadata: {
                  type: 'object',
                  description: 'Additional metadata to apply to all tasks'
                },
                notes: {
                  type: 'string',
                  description: 'Notes to add to all tasks (stored in metadata)'
                },
                projectId: {
                  type: 'string',
                  description: 'Optional project ID for validation (uses current if not specified)'
                }
              },
              required: ['task_ids']
            },
          },
          {
            name: 'task_progress_summary',
            description: 'Get task progress summary with grouping and completion percentages',
            inputSchema: {
              type: 'object',
              properties: {
                groupBy: {
                  type: 'string',
                  enum: ['phase', 'status', 'priority', 'type', 'assignedTo'],
                  description: 'How to group the progress summary (default: phase)',
                  default: 'phase'
                },
                projectId: {
                  type: 'string',
                  description: 'Project ID to analyze (optional, uses current project if not provided)'
                }
              }
            }
          },
          {
            name: 'code_analyze',
            description: 'Analyze code file structure and dependencies',
            inputSchema: {
              type: 'object',
              properties: {
                filePath: {
                  type: 'string',
                  description: 'Path to file to analyze'
                },
                content: {
                  type: 'string',
                  description: 'File content (optional, will read from disk if not provided)'
                },
                forceReanalyze: {
                  type: 'boolean',
                  description: 'Force reanalysis even if cached',
                  default: false
                },
                projectId: {
                  type: 'string',
                  description: 'Optional project ID (uses current if not specified)'
                }
              },
              required: ['filePath']
            },
          },
          {
            name: 'code_components',
            description: 'List code components (functions, classes, etc.) in project',
            inputSchema: {
              type: 'object',
              properties: {
                projectId: {
                  type: 'string',
                  description: 'Optional project ID (uses current if not specified)'
                },
                componentType: {
                  type: 'string',
                  description: 'Filter by component type (function, class, interface, etc.)'
                },
                filePath: {
                  type: 'string',
                  description: 'Filter by specific file path'
                }
              }
            },
          },
          {
            name: 'code_dependencies',
            description: 'Get dependencies for a specific component',
            inputSchema: {
              type: 'object',
              properties: {
                componentId: {
                  type: 'string',
                  description: 'Component ID to get dependencies for'
                }
              },
              required: ['componentId']
            },
          },
          {
            name: 'code_impact',
            description: 'Analyze the impact of changing a component',
            inputSchema: {
              type: 'object',
              properties: {
                componentId: {
                  type: 'string',
                  description: 'Component ID to analyze impact for'
                }
              },
              required: ['componentId']
            },
          },
          {
            name: 'code_stats',
            description: 'Get code analysis statistics for a project',
            inputSchema: {
              type: 'object',
              properties: {
                projectId: {
                  type: 'string',
                  description: 'Optional project ID (uses current if not specified)'
                }
              }
            },
          },
          {
            name: 'smart_search',
            description: 'Intelligent search across all project data sources',
            inputSchema: {
              type: 'object',
              properties: {
                query: {
                  type: 'string',
                  description: 'Search query'
                },
                includeTypes: {
                  type: 'array',
                  items: {
                    type: 'string',
                    enum: ['context', 'component', 'decision', 'naming', 'task', 'agent']
                  },
                  description: 'Data sources to search',
                  default: ['context', 'component', 'decision', 'naming']
                },
                limit: {
                  type: 'number',
                  description: 'Maximum results to return',
                  default: 10
                },
                projectId: {
                  type: 'string',
                  description: 'Optional project ID (uses current if not specified)'
                }
              },
              required: ['query']
            },
          },
          {
            name: 'get_recommendations',
            description: 'Get AI-powered recommendations for development',
            inputSchema: {
              type: 'object',
              properties: {
                context: {
                  type: 'string',
                  description: 'Context for recommendations (what you\'re working on)'
                },
                type: {
                  type: 'string',
                  enum: ['naming', 'implementation', 'architecture', 'testing'],
                  description: 'Type of recommendations needed',
                  default: 'implementation'
                },
                projectId: {
                  type: 'string',
                  description: 'Optional project ID (uses current if not specified)'
                }
              },
              required: ['context']
            },
          },
          {
            name: 'project_insights',
            description: 'Get comprehensive project health and insights',
            inputSchema: {
              type: 'object',
              properties: {
                projectId: {
                  type: 'string',
                  description: 'Optional project ID (uses current if not specified)'
                }
              }
            },
          },
        
        // Session Management Tools
        {
          name: 'session_assign',
          description: 'Assign current session to a project',
          inputSchema: {
            type: 'object',
            properties: {
              projectName: {
                type: 'string',
                description: 'Name of the project to assign the session to'
              }
            },
            required: ['projectName']
          }
        },
        {
          name: 'session_status',
          description: 'Get current session status and details',
          inputSchema: {
            type: 'object',
            properties: {}
          }
        },
        {
          name: 'session_new',
          description: 'Create a new session with optional title and project assignment',
          inputSchema: {
            type: 'object',
            properties: {
              title: {
                type: 'string',
                description: 'Optional custom title for the session'
              },
              projectName: {
                type: 'string',
                description: 'Optional project to assign the new session to'
              }
            },
            required: []
          }
        },
        {
          name: 'session_update',
          description: 'Update session title and description for better organization',
          inputSchema: {
            type: 'object',
            properties: {
              sessionId: {
                type: 'string',
                description: 'ID of the session to update'
              },
              title: {
                type: 'string',
                description: 'New title for the session (optional)'
              },
              description: {
                type: 'string',
                description: 'New description for the session (optional)'
              }
            },
            required: ['sessionId']
          }
        },
        {
          name: 'session_details',
          description: 'Get detailed session information including title, description, and metadata',
          inputSchema: {
            type: 'object',
            properties: {
              sessionId: {
                type: 'string',
                description: 'ID of the session to get details for'
              }
            },
            required: ['sessionId']
          }
        },

        // Git Correlation Tools
        {
          name: 'git_session_commits',
          description: 'Get all git commits linked to a session with correlation details',
          inputSchema: {
            type: 'object',
            properties: {
              sessionId: {
                type: 'string',
                description: 'Session ID (uses current session if not provided)'
              },
              includeDetails: {
                type: 'boolean',
                description: 'Include full commit details like files changed, insertions, deletions (default: false)'
              },
              confidenceThreshold: {
                type: 'number',
                minimum: 0,
                maximum: 1,
                description: 'Minimum correlation confidence score (0.0-1.0, default: 0.0)'
              }
            },
            required: []
          }
        },
        {
          name: 'git_commit_sessions',
          description: 'Get all sessions that contributed to a specific git commit',
          inputSchema: {
            type: 'object',
            properties: {
              commitSha: {
                type: 'string',
                description: 'Git commit SHA (full or partial)'
              },
              includeDetails: {
                type: 'boolean',
                description: 'Include detailed session information (default: false)'
              }
            },
            required: ['commitSha']
          }
        },
        {
          name: 'git_correlate_session',
          description: 'Manually trigger git correlation for current or specified session',
          inputSchema: {
            type: 'object',
            properties: {
              sessionId: {
                type: 'string',
                description: 'Session ID (uses current session if not provided)'
              },
              projectId: {
                type: 'string',
                description: 'Project ID (uses session project if not provided)'
              },
              forceRefresh: {
                type: 'boolean',
                description: 'Recalculate existing correlations (default: false)'
              },
              confidenceThreshold: {
                type: 'number',
                minimum: 0,
                maximum: 1,
                description: 'Minimum correlation confidence threshold (default: 0.3)'
              }
            },
            required: []
          }
        },

        // TC013: Pattern Detection Tools
        {
          name: 'pattern_detection_start',
          description: 'Start the real-time pattern detection service',
          inputSchema: {
            type: 'object',
            properties: {
              enableRealTime: {
                type: 'boolean',
                description: 'Enable real-time pattern detection (default: true)'
              },
              enableBatchProcessing: {
                type: 'boolean',
                description: 'Enable batch processing for historical analysis (default: true)'
              },
              detectionTimeoutMs: {
                type: 'number',
                description: 'Detection timeout in milliseconds (default: 100)'
              },
              updateIntervalMs: {
                type: 'number',
                description: 'Pattern update interval in milliseconds (default: 5000)'
              }
            }
          }
        },
        {
          name: 'pattern_detection_stop',
          description: 'Stop the pattern detection service and get final metrics',
          inputSchema: {
            type: 'object',
            properties: {}
          }
        },
        {
          name: 'pattern_detect_commits',
          description: 'Detect patterns in specific commits or recent commits for current session',
          inputSchema: {
            type: 'object',
            properties: {
              commitShas: {
                type: 'array',
                items: { type: 'string' },
                description: 'Specific commit SHAs to analyze (if not provided, uses recent commits)'
              },
              sessionId: {
                type: 'string',
                description: 'Optional session ID (uses current if not specified)'
              },
              projectId: {
                type: 'string',
                description: 'Optional project ID (uses session project if not specified)'
              },
              realTimeMode: {
                type: 'boolean',
                description: 'Use real-time buffered processing (default: false)'
              }
            }
          }
        },
        {
          name: 'pattern_get_session_insights',
          description: 'Get pattern insights for current session',
          inputSchema: {
            type: 'object',
            properties: {
              sessionId: {
                type: 'string',
                description: 'Optional session ID (uses current if not specified)'
              },
              confidenceThreshold: {
                type: 'number',
                minimum: 0,
                maximum: 1,
                description: 'Minimum confidence score for insights (default: 0.5)'
              },
              includeHistorical: {
                type: 'boolean',
                description: 'Include historical insights (default: false)'
              },
              riskLevelFilter: {
                type: 'array',
                items: { type: 'string', enum: ['low', 'medium', 'high', 'critical'] },
                description: 'Filter by risk levels'
              },
              insightTypeFilter: {
                type: 'array',
                items: { type: 'string' },
                description: 'Filter by insight types'
              }
            }
          }
        },
        {
          name: 'pattern_analyze_project',
          description: 'Get comprehensive pattern analysis for project',
          inputSchema: {
            type: 'object',
            properties: {
              projectId: {
                type: 'string',
                description: 'Optional project ID (uses session project if not specified)'
              },
              sessionId: {
                type: 'string',
                description: 'Optional session ID (uses current if not specified)'
              },
              timeRangeHours: {
                type: 'number',
                description: 'Analysis time range in hours (default: 72)'
              },
              includeArchived: {
                type: 'boolean',
                description: 'Include archived patterns (default: false)'
              },
              patternTypes: {
                type: 'array',
                items: { type: 'string' },
                description: 'Filter by pattern types'
              }
            }
          }
        },
        {
          name: 'pattern_get_alerts',
          description: 'Get real-time pattern alerts for high-risk discoveries',
          inputSchema: {
            type: 'object',
            properties: {
              projectId: {
                type: 'string',
                description: 'Optional project ID (uses session project if not specified)'
              },
              sessionId: {
                type: 'string',
                description: 'Optional session ID (uses current if not specified)'
              },
              severityFilter: {
                type: 'array',
                items: { type: 'string', enum: ['info', 'warning', 'error', 'critical'] },
                description: 'Filter by alert severity'
              },
              alertTypeFilter: {
                type: 'array',
                items: { type: 'string' },
                description: 'Filter by alert types'
              },
              timeRangeHours: {
                type: 'number',
                description: 'Time range in hours (default: 24)'
              },
              limit: {
                type: 'number',
                description: 'Maximum number of alerts (default: 20)'
              }
            }
          }
        },
        {
          name: 'pattern_detection_status',
          description: 'Get pattern detection service status and performance metrics',
          inputSchema: {
            type: 'object',
            properties: {}
          }
        },
        {
          name: 'pattern_track_git_activity',
          description: 'Track git activity with automatic pattern detection',
          inputSchema: {
            type: 'object',
            properties: {}
          }
        },
        
        // TC017: Pattern Analysis Tools - Comprehensive pattern intelligence API
        {
          name: 'pattern_get_discovered',
          description: 'Get discovered patterns with advanced filtering and search capabilities',
          inputSchema: {
            type: 'object',
            properties: {
              projectId: { type: 'string', description: 'Project ID to analyze' },
              sessionId: { type: 'string', description: 'Session ID to analyze' },
              patternTypes: { type: 'array', items: { type: 'string' }, description: 'Pattern types to include' },
              confidenceMin: { type: 'number', description: 'Minimum confidence threshold' },
              riskLevelFilter: { type: 'array', items: { type: 'string' }, description: 'Risk levels to filter' },
              timeRangeHours: { type: 'number', description: 'Time range in hours' },
              limit: { type: 'number', description: 'Maximum results to return' },
              offset: { type: 'number', description: 'Result offset for pagination' }
            }
          }
        },
        {
          name: 'pattern_get_trends',
          description: 'Analyze pattern trends over time with forecasting',
          inputSchema: {
            type: 'object',
            properties: {
              projectId: { type: 'string', description: 'Project ID to analyze' },
              patternType: { type: 'string', description: 'Pattern type to analyze trends for' },
              timeRangeDays: { type: 'number', description: 'Time range in days' },
              granularity: { type: 'string', enum: ['hour', 'day', 'week', 'month'], description: 'Time granularity' },
              includeForecasting: { type: 'boolean', description: 'Include trend forecasting' },
              minConfidence: { type: 'number', description: 'Minimum confidence threshold' }
            },
            required: ['patternType']
          }
        },
        {
          name: 'pattern_get_correlations',
          description: 'Find correlations between different pattern types and instances',
          inputSchema: {
            type: 'object',
            properties: {
              projectId: { type: 'string', description: 'Project ID to analyze' },
              pattern1Type: { type: 'string', description: 'First pattern type' },
              pattern2Type: { type: 'string', description: 'Second pattern type' },
              minCorrelationScore: { type: 'number', description: 'Minimum correlation score' },
              timeRangeHours: { type: 'number', description: 'Time range in hours' },
              includeNegativeCorrelations: { type: 'boolean', description: 'Include negative correlations' },
              limit: { type: 'number', description: 'Maximum results to return' }
            }
          }
        },
        {
          name: 'pattern_get_insights',
          description: 'Get actionable pattern insights with advanced filtering',
          inputSchema: {
            type: 'object',
            properties: {
              projectId: { type: 'string', description: 'Project ID to analyze' },
              sessionId: { type: 'string', description: 'Session ID to analyze' },
              insightTypes: { type: 'array', items: { type: 'string' }, description: 'Insight types to include' },
              riskLevelFilter: { type: 'array', items: { type: 'string' }, description: 'Risk levels to filter' },
              confidenceMin: { type: 'number', description: 'Minimum confidence threshold' },
              businessImpactFilter: { type: 'array', items: { type: 'string' }, description: 'Business impact levels' },
              sortBy: { type: 'string', enum: ['confidence', 'risk', 'priority', 'impact', 'created'], description: 'Sort order' },
              limit: { type: 'number', description: 'Maximum results to return' },
              offset: { type: 'number', description: 'Result offset for pagination' }
            }
          }
        },
        {
          name: 'pattern_get_anomalies',
          description: 'Detect pattern anomalies and outliers with statistical analysis',
          inputSchema: {
            type: 'object',
            properties: {
              projectId: { type: 'string', description: 'Project ID to analyze' },
              patternTypes: { type: 'array', items: { type: 'string' }, description: 'Pattern types to analyze' },
              detectionMethod: { type: 'string', enum: ['statistical', 'ml', 'threshold', 'hybrid'], description: 'Detection method' },
              sensitivityLevel: { type: 'string', enum: ['low', 'medium', 'high'], description: 'Detection sensitivity' },
              timeRangeHours: { type: 'number', description: 'Time range in hours' },
              minAnomalyScore: { type: 'number', description: 'Minimum anomaly score threshold' },
              limit: { type: 'number', description: 'Maximum results to return' }
            }
          }
        },
        {
          name: 'pattern_get_recommendations',
          description: 'Generate AI-driven pattern-based recommendations',
          inputSchema: {
            type: 'object',
            properties: {
              projectId: { type: 'string', description: 'Project ID to analyze' },
              sessionId: { type: 'string', description: 'Session ID to analyze' },
              focusAreas: { type: 'array', items: { type: 'string' }, description: 'Areas to focus recommendations on' },
              priorityLevel: { type: 'string', enum: ['low', 'medium', 'high', 'urgent'], description: 'Minimum priority level' },
              implementationCapacity: { type: 'string', enum: ['limited', 'moderate', 'high'], description: 'Implementation capacity' },
              limit: { type: 'number', description: 'Maximum results to return' }
            }
          }
        },
        {
          name: 'pattern_analyze_session',
          description: 'Analyze patterns for specific session context',
          inputSchema: {
            type: 'object',
            properties: {
              sessionId: { type: 'string', description: 'Session ID to analyze' },
              includeHistorical: { type: 'boolean', description: 'Include historical patterns' },
              timeRangeHours: { type: 'number', description: 'Time range in hours' },
              analysisDepth: { type: 'string', enum: ['basic', 'detailed', 'comprehensive'], description: 'Analysis depth' }
            }
          }
        },
        {
          name: 'pattern_analyze_commit',
          description: 'Analyze patterns for specific git commits with impact analysis',
          inputSchema: {
            type: 'object',
            properties: {
              commitShas: { type: 'array', items: { type: 'string' }, description: 'Git commit SHAs to analyze' },
              projectId: { type: 'string', description: 'Project ID' },
              includeImpactAnalysis: { type: 'boolean', description: 'Include change impact analysis' },
              analysisDepth: { type: 'string', enum: ['basic', 'detailed', 'comprehensive'], description: 'Analysis depth' }
            },
            required: ['commitShas']
          }
        },
        {
          name: 'pattern_get_performance',
          description: 'Get pattern detection system performance metrics and optimization insights',
          inputSchema: {
            type: 'object',
            properties: {
              projectId: { type: 'string', description: 'Project ID to analyze' },
              timeRangeHours: { type: 'number', description: 'Time range in hours' },
              includeOptimizationSuggestions: { type: 'boolean', description: 'Include optimization suggestions' }
            }
          }
        },

        // TT009-2: Phase 2 Metrics Consolidation Tools
        {
          name: 'metrics_collect',
          description: 'Unified metrics collection tool - replaces metrics_collect_project, metrics_get_core_metrics, metrics_get_pattern_intelligence, and metrics_get_productivity_health',
          inputSchema: {
            type: 'object',
            properties: {
              scope: {
                type: 'string',
                enum: ['project', 'core', 'patterns', 'productivity'],
                description: 'Scope of metrics to collect'
              },
              target: {
                type: 'string',
                description: 'Target identifier (usually project ID)'
              },
              options: {
                type: 'object',
                description: 'Scope-specific options',
                properties: {
                  trigger: {
                    type: 'string',
                    enum: ['manual', 'git_commit', 'scheduled', 'pattern_update', 'session_end'],
                    description: 'What triggered this collection (for project scope)'
                  },
                  metricTypes: {
                    type: 'array',
                    items: { type: 'string' },
                    description: 'Specific metric types to retrieve (for core scope)'
                  },
                  intelligenceTypes: {
                    type: 'array',
                    items: { type: 'string' },
                    description: 'Intelligence types to retrieve (for patterns scope)'
                  },
                  productivityTypes: {
                    type: 'array',
                    items: { type: 'string' },
                    description: 'Productivity metrics to retrieve (for productivity scope)'
                  },
                  timeframe: {
                    type: 'string',
                    enum: ['1d', '7d', '30d', '90d'],
                    description: 'Time period for analysis',
                    default: '30d'
                  },
                  developerEmail: {
                    type: 'string',
                    description: 'Specific developer email (for productivity scope)'
                  }
                }
              }
            },
            required: ['scope', 'target']
          }
        },
        {
          name: 'metrics_analyze',
          description: 'Unified metrics analysis tool - replaces metrics_get_dashboard, metrics_get_trends, metrics_aggregate_projects, metrics_aggregate_timeline, metrics_calculate_correlations, and metrics_get_executive_summary',
          inputSchema: {
            type: 'object',
            properties: {
              analysis: {
                type: 'string',
                enum: ['dashboard', 'trends', 'correlations', 'executive', 'aggregate_projects', 'aggregate_timeline'],
                description: 'Type of analysis to perform'
              },
              options: {
                type: 'object',
                description: 'Analysis-specific options',
                properties: {
                  projectId: {
                    type: 'string',
                    description: 'Project ID (required for most analysis types)'
                  },
                  projectIds: {
                    type: 'array',
                    items: { type: 'string' },
                    description: 'Multiple project IDs (for aggregate_projects analysis)'
                  },
                  timeframe: {
                    oneOf: [
                      {
                        type: 'string',
                        enum: ['1d', '7d', '30d', '90d', 'all'],
                        description: 'Simple timeframe'
                      },
                      {
                        type: 'object',
                        properties: {
                          startDate: { type: 'string', description: 'ISO date string' },
                          endDate: { type: 'string', description: 'ISO date string' }
                        },
                        description: 'Custom date range'
                      }
                    ],
                    description: 'Time period for analysis'
                  },
                  metricTypes: {
                    type: 'array',
                    items: { type: 'string' },
                    description: 'Specific metric types to analyze'
                  },
                  includeAlerts: {
                    type: 'boolean',
                    description: 'Include alerts in dashboard analysis',
                    default: true
                  },
                  includeTrends: {
                    type: 'boolean',
                    description: 'Include trends in dashboard analysis',
                    default: true
                  },
                  includeForecast: {
                    type: 'boolean',
                    description: 'Include forecasts in trends analysis',
                    default: true
                  },
                  correlationType: {
                    type: 'string',
                    enum: ['pearson', 'spearman', 'kendall'],
                    description: 'Correlation calculation method',
                    default: 'pearson'
                  },
                  metric1: {
                    type: 'object',
                    description: 'First metric for correlation analysis'
                  },
                  metric2: {
                    type: 'object',
                    description: 'Second metric for correlation analysis'
                  },
                  aggregationType: {
                    type: 'string',
                    enum: ['sum', 'average', 'median', 'percentile', 'count', 'min', 'max'],
                    description: 'Aggregation method for project aggregation',
                    default: 'average'
                  },
                  period: {
                    type: 'string',
                    enum: ['daily', 'weekly', 'monthly', 'quarterly'],
                    description: 'Period for timeline aggregation',
                    default: 'daily'
                  },
                  granularity: {
                    type: 'string',
                    enum: ['hour', 'day', 'week', 'month'],
                    description: 'Granularity for timeline aggregation',
                    default: 'day'
                  }
                }
              }
            },
            required: ['analysis']
          }
        },
        {
          name: 'metrics_control',
          description: 'TT009-2-3: Unified metrics control tool - collection management, alerts, performance, export',
          inputSchema: {
            type: 'object',
            properties: {
              operation: {
                type: 'string',
                enum: ['start', 'stop', 'alerts', 'acknowledge', 'resolve', 'performance', 'export'],
                description: 'Control operation to perform'
              },
              options: {
                type: 'object',
                description: 'Operation-specific options',
                properties: {
                  // Start operation options
                  projectId: {
                    type: 'string',
                    description: 'Project ID (for start/alerts/export operations)'
                  },
                  sessionId: {
                    type: 'string',
                    description: 'Session ID (for start operation)'
                  },
                  intervalMs: {
                    type: 'number',
                    description: 'Collection interval in milliseconds (for start operation)',
                    default: 300000
                  },
                  autoCollectGit: {
                    type: 'boolean',
                    description: 'Enable automatic git correlation (for start operation)',
                    default: true
                  },
                  // Stop operation options
                  gracefulShutdown: {
                    type: 'boolean',
                    description: 'Graceful shutdown flag (for stop operation)',
                    default: true
                  },
                  collectFinalMetrics: {
                    type: 'boolean',
                    description: 'Collect final metrics before stopping (for stop operation)',
                    default: true
                  },
                  // Alerts operation options
                  severity: {
                    type: 'array',
                    items: { type: 'string' },
                    description: 'Alert severity levels to include (for alerts operation)',
                    default: ['low', 'medium', 'high', 'critical']
                  },
                  status: {
                    type: 'string',
                    description: 'Alert status filter (for alerts operation)',
                    default: 'active'
                  },
                  limit: {
                    type: 'number',
                    description: 'Maximum number of alerts to return (for alerts operation)',
                    default: 50
                  },
                  includeResolved: {
                    type: 'boolean',
                    description: 'Include resolved alerts (for alerts operation)',
                    default: false
                  },
                  // Acknowledge/Resolve operation options
                  alertId: {
                    type: 'string',
                    description: 'Alert ID (for acknowledge/resolve operations)'
                  },
                  acknowledgedBy: {
                    type: 'string',
                    description: 'Who acknowledged the alert (for acknowledge operation)',
                    default: 'ai'
                  },
                  resolvedBy: {
                    type: 'string',
                    description: 'Who resolved the alert (for resolve operation)',
                    default: 'ai'
                  },
                  notes: {
                    type: 'string',
                    description: 'Acknowledgment notes (for acknowledge operation)'
                  },
                  resolution: {
                    type: 'string',
                    description: 'Resolution description (for resolve operation)'
                  },
                  resolutionNotes: {
                    type: 'string',
                    description: 'Resolution notes (for resolve operation)'
                  },
                  // Performance operation options
                  timeframe: {
                    type: 'string',
                    description: 'Performance timeframe (for performance operation)',
                    default: '1h'
                  },
                  includeSystemMetrics: {
                    type: 'boolean',
                    description: 'Include system performance metrics (for performance operation)',
                    default: true
                  },
                  includeQueueMetrics: {
                    type: 'boolean',
                    description: 'Include queue performance metrics (for performance operation)',
                    default: true
                  },
                  // Export operation options
                  format: {
                    type: 'string',
                    enum: ['json', 'csv'],
                    description: 'Export format (for export operation)',
                    default: 'json'
                  },
                  dateRange: {
                    type: 'object',
                    description: 'Date range for export (for export operation)',
                    properties: {
                      startDate: { type: 'string', format: 'date-time' },
                      endDate: { type: 'string', format: 'date-time' }
                    }
                  },
                  metricTypes: {
                    type: 'array',
                    items: { type: 'string' },
                    description: 'Metric types to export (for export operation)',
                    default: []
                  },
                  includeMetadata: {
                    type: 'boolean',
                    description: 'Include metadata in export (for export operation)',
                    default: true
                  },
                  compressionLevel: {
                    type: 'string',
                    enum: ['none', 'low', 'medium', 'high'],
                    description: 'Compression level for export (for export operation)',
                    default: 'none'
                  }
                }
              }
            },
            required: ['operation']
          }
        },
        {
          name: 'pattern_analyze',
          description: 'TT009-3-1: Unified pattern analysis tool - detection, analysis, tracking operations',
          inputSchema: {
            type: 'object',
            properties: {
              target: {
                type: 'string',
                enum: ['project', 'session', 'commit', 'git', 'service'],
                description: 'Analysis target type'
              },
              action: {
                type: 'string',
                enum: ['start', 'stop', 'status', 'analyze', 'detect', 'track', 'discovered', 'performance'],
                description: 'Analysis action to perform'
              },
              options: {
                type: 'object',
                description: 'Target and action-specific options',
                properties: {
                  // Service operations
                  enableRealTime: {
                    type: 'boolean',
                    description: 'Enable real-time detection (for service operations)',
                    default: true
                  },
                  enableBatchProcessing: {
                    type: 'boolean',
                    description: 'Enable batch processing (for service operations)',
                    default: true
                  },
                  detectionTimeoutMs: {
                    type: 'number',
                    description: 'Detection timeout in milliseconds (for service operations)',
                    default: 30000
                  },
                  updateIntervalMs: {
                    type: 'number',
                    description: 'Update interval in milliseconds (for service operations)',
                    default: 5000
                  },
                  // Project analysis
                  projectId: {
                    type: 'string',
                    description: 'Project ID (for project/git operations)'
                  },
                  includeGitPatterns: {
                    type: 'boolean',
                    description: 'Include git patterns (for project analysis)',
                    default: true
                  },
                  includeSessionPatterns: {
                    type: 'boolean',
                    description: 'Include session patterns (for project analysis)',
                    default: true
                  },
                  includeHistoricalData: {
                    type: 'boolean',
                    description: 'Include historical data (for project analysis)',
                    default: true
                  },
                  analysisDepth: {
                    type: 'string',
                    enum: ['basic', 'comprehensive', 'deep'],
                    description: 'Analysis depth level (for project analysis)',
                    default: 'comprehensive'
                  },
                  patternTypes: {
                    type: 'array',
                    items: { type: 'string' },
                    description: 'Pattern types to analyze (for various operations)',
                    default: ['all']
                  },
                  // Session analysis
                  sessionId: {
                    type: 'string',
                    description: 'Session ID (for session operations)'
                  },
                  includeContextPatterns: {
                    type: 'boolean',
                    description: 'Include context patterns (for session analysis)',
                    default: true
                  },
                  includeTimePatterns: {
                    type: 'boolean',
                    description: 'Include time patterns (for session analysis)',
                    default: true
                  },
                  includeActivityPatterns: {
                    type: 'boolean',
                    description: 'Include activity patterns (for session analysis)',
                    default: true
                  },
                  confidenceThreshold: {
                    type: 'number',
                    description: 'Confidence threshold (for session analysis)',
                    default: 0.7
                  },
                  // Commit analysis
                  commitSha: {
                    type: 'string',
                    description: 'Commit SHA (for single commit analysis)'
                  },
                  commitShas: {
                    type: 'array',
                    items: { type: 'string' },
                    description: 'Commit SHAs (for multiple commit detection)'
                  },
                  includeImpactAnalysis: {
                    type: 'boolean',
                    description: 'Include impact analysis (for commit analysis)',
                    default: true
                  },
                  includeFilePatterns: {
                    type: 'boolean',
                    description: 'Include file patterns (for commit operations)',
                    default: true
                  },
                  includeChangePatterns: {
                    type: 'boolean',
                    description: 'Include change patterns (for commit operations)',
                    default: true
                  },
                  maxCommits: {
                    type: 'number',
                    description: 'Maximum commits to analyze (for commit detection)',
                    default: 10
                  },
                  // Git tracking
                  enableRealTimeTracking: {
                    type: 'boolean',
                    description: 'Enable real-time git tracking (for git operations)',
                    default: true
                  },
                  trackingIntervalMs: {
                    type: 'number',
                    description: 'Tracking interval in milliseconds (for git operations)',
                    default: 30000
                  },
                  minConfidence: {
                    type: 'number',
                    description: 'Minimum confidence score (for various operations)',
                    default: 0.6
                  },
                  includeMetadata: {
                    type: 'boolean',
                    description: 'Include metadata (for discovered patterns)',
                    default: true
                  },
                  limitResults: {
                    type: 'number',
                    description: 'Limit number of results (for discovered patterns)',
                    default: 100
                  }
                }
              }
            },
            required: ['target', 'action']
          }
        },
        {
          name: 'pattern_insights',
          description: 'TT009-3-2: Unified pattern insights tool - insights, correlations, recommendations, alerts',
          inputSchema: {
            type: 'object',
            properties: {
              type: {
                type: 'string',
                enum: ['alerts', 'session', 'insights', 'trends', 'correlations', 'anomalies', 'recommendations'],
                description: 'Type of insight to retrieve'
              },
              options: {
                type: 'object',
                description: 'Type-specific options',
                properties: {
                  // General options
                  projectId: {
                    type: 'string',
                    description: 'Project ID (for various operations)'
                  },
                  sessionId: {
                    type: 'string',
                    description: 'Session ID (for various operations)'
                  },
                  // Alerts options
                  severity: {
                    type: 'array',
                    items: { type: 'string' },
                    description: 'Alert severity levels (for alerts)',
                    default: ['medium', 'high', 'critical']
                  },
                  status: {
                    type: 'string',
                    description: 'Alert status filter (for alerts)',
                    default: 'active'
                  },
                  limit: {
                    type: 'number',
                    description: 'Maximum results to return (for various operations)',
                    default: 50
                  },
                  includeResolved: {
                    type: 'boolean',
                    description: 'Include resolved alerts (for alerts)',
                    default: false
                  },
                  // Session insights options
                  includeContextPatterns: {
                    type: 'boolean',
                    description: 'Include context patterns (for session insights)',
                    default: true
                  },
                  includeActivityPatterns: {
                    type: 'boolean',
                    description: 'Include activity patterns (for session insights)',
                    default: true
                  },
                  includeTimePatterns: {
                    type: 'boolean',
                    description: 'Include time patterns (for session insights)',
                    default: true
                  },
                  minConfidence: {
                    type: 'number',
                    description: 'Minimum confidence score (for various operations)',
                    default: 0.6
                  },
                  // Actionable insights options
                  patternTypes: {
                    type: 'array',
                    items: { type: 'string' },
                    description: 'Pattern types to analyze (for various operations)',
                    default: ['all']
                  },
                  riskLevels: {
                    type: 'array',
                    items: { type: 'string' },
                    description: 'Risk levels to include (for insights)',
                    default: ['medium', 'high', 'critical']
                  },
                  maxAge: {
                    type: 'string',
                    description: 'Maximum age of patterns (for insights)',
                    default: '30d'
                  },
                  includeRecommendations: {
                    type: 'boolean',
                    description: 'Include recommendations (for insights)',
                    default: true
                  },
                  limitResults: {
                    type: 'number',
                    description: 'Limit number of results (for insights)',
                    default: 100
                  },
                  // Trends options
                  timeframe: {
                    type: 'string',
                    description: 'Analysis timeframe (for trends/correlations)',
                    default: '30d'
                  },
                  includeForecast: {
                    type: 'boolean',
                    description: 'Include forecast data (for trends)',
                    default: true
                  },
                  forecastPeriods: {
                    type: 'number',
                    description: 'Number of forecast periods (for trends)',
                    default: 7
                  },
                  granularity: {
                    type: 'string',
                    enum: ['hourly', 'daily', 'weekly'],
                    description: 'Data granularity (for trends)',
                    default: 'daily'
                  },
                  smoothing: {
                    type: 'string',
                    enum: ['none', 'moving_average', 'exponential'],
                    description: 'Smoothing method (for trends)',
                    default: 'moving_average'
                  },
                  // Correlations options
                  patternType1: {
                    type: 'string',
                    description: 'First pattern type (for correlations)'
                  },
                  patternType2: {
                    type: 'string',
                    description: 'Second pattern type (for correlations)'
                  },
                  correlationType: {
                    type: 'string',
                    enum: ['pearson', 'spearman', 'kendall'],
                    description: 'Correlation method (for correlations)',
                    default: 'pearson'
                  },
                  includeLagAnalysis: {
                    type: 'boolean',
                    description: 'Include lag analysis (for correlations)',
                    default: false
                  },
                  maxLag: {
                    type: 'number',
                    description: 'Maximum lag periods (for correlations)',
                    default: 7
                  },
                  // Anomalies options
                  detectionMethod: {
                    type: 'string',
                    enum: ['statistical', 'isolation_forest', 'one_class_svm'],
                    description: 'Anomaly detection method (for anomalies)',
                    default: 'statistical'
                  },
                  sensitivityLevel: {
                    type: 'string',
                    enum: ['low', 'medium', 'high'],
                    description: 'Detection sensitivity (for anomalies)',
                    default: 'medium'
                  },
                  includeContext: {
                    type: 'boolean',
                    description: 'Include contextual information (for anomalies)',
                    default: true
                  },
                  // Recommendations options
                  contextType: {
                    type: 'string',
                    enum: ['development', 'quality', 'performance', 'security'],
                    description: 'Recommendation context (for recommendations)',
                    default: 'development'
                  },
                  includeActionItems: {
                    type: 'boolean',
                    description: 'Include action items (for recommendations)',
                    default: true
                  },
                  includePrioritization: {
                    type: 'boolean',
                    description: 'Include prioritization (for recommendations)',
                    default: true
                  },
                  includeRiskAssessment: {
                    type: 'boolean',
                    description: 'Include risk assessment (for recommendations)',
                    default: true
                  },
                  maxRecommendations: {
                    type: 'number',
                    description: 'Maximum recommendations (for recommendations)',
                    default: 20
                  }
                }
              }
            },
            required: ['type']
          }
        },

        // TC014: Deprecated metrics tools removed - TT009-2 Complete
        // 17 individual metrics tools consolidated into 3 unified tools:
        //   - metrics_collect, metrics_analyze, metrics_control

        // Code Complexity Tools - TC015: Multi-dimensional complexity tracking system
        {
          name: 'complexity_analyze',
          description: 'Unified complexity analysis tool - replaces complexity_analyze_files, complexity_analyze_commit, complexity_get_file_metrics, and complexity_get_function_metrics',
          inputSchema: {
            type: 'object',
            properties: {
              projectId: {
                type: 'string',
                description: 'Project ID'
              },
              metricTypes: {
                type: 'array',
                items: {
                  type: 'string',
                  enum: ['code_velocity', 'development_focus', 'change_frequency', 'volatility_index', 'technical_debt_accumulation', 'quality_trend']
                },
                description: 'List of specific metrics to retrieve'
              },
              timeframe: {
                type: 'string',
                enum: ['1d', '7d', '30d', '90d', 'all'],
                description: 'Time period for metrics',
                default: '30d'
              },
              includeDetails: {
                type: 'boolean',
                description: 'Include detailed breakdown and analysis',
                default: false
              }
            },
            required: ['projectId']
          }
        },
        {
          name: 'metrics_get_pattern_intelligence',
          description: 'Get pattern-based intelligence metrics',
          inputSchema: {
            type: 'object',
            properties: {
              projectId: {
                type: 'string',
                description: 'Project ID'
              },
              analysisDepth: {
                type: 'string',
                enum: ['basic', 'detailed', 'comprehensive'],
                description: 'Level of pattern analysis',
                default: 'detailed'
              },
              timeframe: {
                type: 'string',
                enum: ['1d', '7d', '30d', '90d', 'all'],
                description: 'Time period for analysis',
                default: '30d'
              }
            },
            required: ['projectId']
          }
        },
        {
          name: 'metrics_get_productivity_health',
          description: 'Get developer productivity and health metrics',
          inputSchema: {
            type: 'object',
            properties: {
              projectId: {
                type: 'string',
                description: 'Project ID'
              },
              includeTeamMetrics: {
                type: 'boolean',
                description: 'Include team-wide metrics',
                default: true
              },
              timeframe: {
                type: 'string',
                enum: ['1d', '7d', '30d', '90d', 'all'],
                description: 'Time period for metrics',
                default: '30d'
              }
            },
            required: ['projectId']
          }
        },
        {
          name: 'metrics_get_alerts',
          description: 'Get active metrics alerts and notifications',
          inputSchema: {
            type: 'object',
            properties: {
              projectId: {
                type: 'string',
                description: 'Project ID to get alerts for'
              },
              severity: {
                type: 'string',
                enum: ['low', 'medium', 'high', 'critical'],
                description: 'Filter by alert severity'
              },
              category: {
                type: 'string',
                enum: ['performance', 'quality', 'debt', 'velocity', 'complexity'],
                description: 'Filter by alert category'
              },
              includeResolved: {
                type: 'boolean',
                description: 'Include resolved alerts',
                default: false
              }
            },
            required: ['projectId']
          }
        },
        {
          name: 'metrics_acknowledge_alert',
          description: 'Acknowledge a metrics alert',
          inputSchema: {
            type: 'object',
            properties: {
              alertId: {
                type: 'string',
                description: 'Alert ID to acknowledge'
              },
              message: {
                type: 'string',
                description: 'Acknowledgment message'
              }
            },
            required: ['alertId']
          }
        },
        {
          name: 'metrics_resolve_alert',
          description: 'Mark a metrics alert as resolved',
          inputSchema: {
            type: 'object',
            properties: {
              alertId: {
                type: 'string',
                description: 'Alert ID to resolve'
              },
              resolution: {
                type: 'string',
                description: 'Description of how the alert was resolved'
              }
            },
            required: ['alertId', 'resolution']
          }
        },
        {
          name: 'metrics_get_trends',
          description: 'Get metrics trends and forecasting data',
          inputSchema: {
            type: 'object',
            properties: {
              projectId: {
                type: 'string',
                description: 'Project ID'
              },
              metricTypes: {
                type: 'array',
                items: { type: 'string' },
                description: 'List of metric types to analyze for trends'
              },
              timeframe: {
                type: 'string',
                enum: ['7d', '30d', '90d', '180d', '1y'],
                description: 'Time period for trend analysis',
                default: '30d'
              },
              includeForecast: {
                type: 'boolean',
                description: 'Include forecasting projections',
                default: true
              }
            },
            required: ['projectId']
          }
        },
        {
          name: 'metrics_get_performance',
          description: 'Get metrics collection system performance statistics',
          inputSchema: {
            type: 'object',
            properties: {
              includeDetailedStats: {
                type: 'boolean',
                description: 'Include detailed performance breakdown',
                default: false
              },
              timeframe: {
                type: 'string',
                enum: ['1h', '24h', '7d', '30d'],
                description: 'Time period for performance stats',
                default: '24h'
              }
            }
          }
        },
        {
          name: 'metrics_start_collection',
          description: 'Start the metrics collection service',
          inputSchema: {
            type: 'object',
            properties: {
              projectId: {
                type: 'string',
                description: 'Project ID to start collection for (optional, starts for all if not specified)'
              },
              collectionMode: {
                type: 'string',
                enum: ['real_time', 'batch', 'hybrid'],
                description: 'Collection mode',
                default: 'hybrid'
              }
            }
          }
        },
        {
          name: 'metrics_stop_collection',
          description: 'Stop the metrics collection service',
          inputSchema: {
            type: 'object',
            properties: {
              projectId: {
                type: 'string',
                description: 'Project ID to stop collection for (optional, stops all if not specified)'
              },
              graceful: {
                type: 'boolean',
                description: 'Perform graceful shutdown',
                default: true
              }
            }
          }
        },
        
        // TC018: Metrics Aggregation Tools - Advanced aggregation and correlation analysis
        {
          name: 'metrics_aggregate_projects',
          description: 'Aggregate metrics across multiple projects with various aggregation types',
          inputSchema: {
            type: 'object',
            properties: {
              projectIds: {
                type: 'array',
                items: { type: 'string' },
                description: 'List of project IDs to aggregate metrics from'
              },
              timeframe: {
                type: 'object',
                properties: {
                  startDate: { type: 'string', description: 'Start date (ISO format)' },
                  endDate: { type: 'string', description: 'End date (ISO format)' }
                },
                required: ['startDate', 'endDate'],
                description: 'Time period for aggregation'
              },
              metricTypes: {
                type: 'array',
                items: { type: 'string' },
                description: 'List of metric types to include (e.g., code_velocity, technical_debt_accumulation)'
              },
              aggregationType: {
                type: 'string',
                enum: ['sum', 'average', 'median', 'percentile', 'count', 'min', 'max'],
                description: 'Type of aggregation to perform'
              },
              percentileValue: {
                type: 'number',
                description: 'Percentile value (0-100) for percentile aggregation'
              },
              groupBy: {
                type: 'string',
                enum: ['project', 'metric_type', 'time_period', 'scope'],
                description: 'How to group the aggregated results'
              },
              includeConfidenceMetrics: {
                type: 'boolean',
                description: 'Include confidence intervals and statistical measures'
              }
            },
            required: ['projectIds', 'timeframe', 'metricTypes', 'aggregationType']
          }
        },
        {
          name: 'metrics_aggregate_timeline',
          description: 'Aggregate metrics over time with specified granularity and smoothing',
          inputSchema: {
            type: 'object',
            properties: {
              projectId: {
                type: 'string',
                description: 'Project ID to analyze'
              },
              period: {
                type: 'string',
                enum: ['daily', 'weekly', 'monthly', 'quarterly'],
                description: 'Aggregation period'
              },
              granularity: {
                type: 'string',
                enum: ['hour', 'day', 'week', 'month'],
                description: 'Time granularity for data points'
              },
              metricTypes: {
                type: 'array',
                items: { type: 'string' },
                description: 'List of metric types to include (optional, all if not specified)'
              },
              timeframe: {
                type: 'object',
                properties: {
                  startDate: { type: 'string', description: 'Start date (ISO format)' },
                  endDate: { type: 'string', description: 'End date (ISO format)' }
                },
                required: ['startDate', 'endDate'],
                description: 'Time period for analysis'
              },
              fillGaps: {
                type: 'boolean',
                description: 'Fill missing time periods with interpolated values'
              },
              smoothing: {
                type: 'string',
                enum: ['none', 'moving_average', 'exponential'],
                description: 'Smoothing algorithm to apply'
              },
              windowSize: {
                type: 'number',
                description: 'Window size for smoothing algorithms'
              }
            },
            required: ['projectId', 'period', 'granularity', 'timeframe']
          }
        },
        {
          name: 'metrics_calculate_correlations',
          description: 'Calculate correlations and relationships between metrics with advanced analysis',
          inputSchema: {
            type: 'object',
            properties: {
              projectId: {
                type: 'string',
                description: 'Project ID to analyze'
              },
              metric1: {
                type: 'object',
                properties: {
                  type: { type: 'string', description: 'First metric type' },
                  scope: { type: 'string', description: 'First metric scope (optional)' }
                },
                required: ['type'],
                description: 'First metric for correlation analysis'
              },
              metric2: {
                type: 'object',
                properties: {
                  type: { type: 'string', description: 'Second metric type' },
                  scope: { type: 'string', description: 'Second metric scope (optional)' }
                },
                required: ['type'],
                description: 'Second metric for correlation analysis'
              },
              timeframe: {
                type: 'object',
                properties: {
                  startDate: { type: 'string', description: 'Start date (ISO format)' },
                  endDate: { type: 'string', description: 'End date (ISO format)' }
                },
                required: ['startDate', 'endDate'],
                description: 'Time period for analysis'
              },
              correlationType: {
                type: 'string',
                enum: ['pearson', 'spearman', 'kendall'],
                description: 'Type of correlation analysis (default: pearson)'
              },
              includeLagAnalysis: {
                type: 'boolean',
                description: 'Include lag correlation analysis'
              },
              maxLag: {
                type: 'number',
                description: 'Maximum lag periods to analyze'
              },
              includeLeadingIndicators: {
                type: 'boolean',
                description: 'Detect leading indicators'
              },
              includePerformanceDrivers: {
                type: 'boolean',
                description: 'Identify performance drivers'
              }
            },
            required: ['projectId', 'metric1', 'metric2', 'timeframe']
          }
        },
        {
          name: 'metrics_get_executive_summary',
          description: 'Generate comprehensive executive summary with key insights and recommendations',
          inputSchema: {
            type: 'object',
            properties: {
              projectId: {
                type: 'string',
                description: 'Project ID to analyze'
              },
              dateRange: {
                type: 'object',
                properties: {
                  startDate: { type: 'string', description: 'Start date (ISO format)' },
                  endDate: { type: 'string', description: 'End date (ISO format)' }
                },
                required: ['startDate', 'endDate'],
                description: 'Analysis period'
              },
              includeForecasts: {
                type: 'boolean',
                description: 'Include predictive forecasts'
              },
              includeRiskAssessment: {
                type: 'boolean',
                description: 'Include risk assessment'
              },
              includeRecommendations: {
                type: 'boolean',
                description: 'Include actionable recommendations'
              },
              compareToBaseline: {
                type: 'boolean',
                description: 'Compare to historical baseline'
              },
              baselinePeriodDays: {
                type: 'number',
                description: 'Number of days for baseline comparison period'
              }
            },
            required: ['projectId', 'dateRange']
          }
        },
        {
          name: 'metrics_export_data',
          description: 'Export aggregated metrics data in various formats (CSV, JSON, Excel)',
          inputSchema: {
            type: 'object',
            properties: {
              projectId: {
                type: 'string',
                description: 'Project ID to export data from'
              },
              exportType: {
                type: 'string',
                enum: ['csv', 'json', 'excel'],
                description: 'Export format'
              },
              metricTypes: {
                type: 'array',
                items: { type: 'string' },
                description: 'List of metric types to export (optional, all if not specified)'
              },
              timeframe: {
                type: 'object',
                properties: {
                  startDate: { type: 'string', description: 'Start date (ISO format)' },
                  endDate: { type: 'string', description: 'End date (ISO format)' }
                },
                required: ['startDate', 'endDate'],
                description: 'Time period for export'
              },
              aggregationType: {
                type: 'string',
                enum: ['raw', 'daily', 'weekly', 'monthly'],
                description: 'Aggregation level for export data'
              },
              includeMetadata: {
                type: 'boolean',
                description: 'Include statistical metadata in export'
              },
              includeCorrelations: {
                type: 'boolean',
                description: 'Include correlation analysis in export'
              }
            },
            required: ['projectId', 'exportType', 'timeframe']
          }
        },

        // Code Complexity Tools - TC015: Multi-dimensional complexity tracking system
        {
          name: 'complexity_analyze',
          description: 'Unified complexity analysis tool - replaces complexity_analyze_files, complexity_analyze_commit, complexity_get_file_metrics, and complexity_get_function_metrics',
          inputSchema: {
            type: 'object',
            properties: {
              target: {
                oneOf: [
                  { type: 'string' },
                  { type: 'array', items: { type: 'string' } }
                ],
                description: 'Target for analysis - file path(s), commit hash(es), or function identifier'
              },
              type: {
                type: 'string',
                enum: ['file', 'files', 'commit', 'function'],
                description: 'Type of analysis to perform'
              },
              options: {
                type: 'object',
                properties: {
                  projectId: {
                    type: 'string',
                    description: 'Project ID for context (auto-detected if not provided)'
                  },
                  trigger: {
                    type: 'string',
                    enum: ['manual', 'git_commit', 'scheduled', 'threshold_breach', 'batch_analysis'],
                    description: 'Analysis trigger source',
                    default: 'manual'
                  },
                  includeMetrics: {
                    type: 'array',
                    items: {
                      type: 'string',
                      enum: ['cyclomatic', 'cognitive', 'halstead', 'dependency', 'all']
                    },
                    description: 'Specific complexity metrics to include',
                    default: ['all']
                  },
                  functionOptions: {
                    type: 'object',
                    properties: {
                      className: {
                        type: 'string',
                        description: 'Class name containing the function'
                      },
                      functionSignature: {
                        type: 'string',
                        description: 'Function signature to match'
                      },
                      lineRange: {
                        type: 'object',
                        properties: {
                          start: { type: 'number' },
                          end: { type: 'number' }
                        },
                        description: 'Line range for analysis'
                      }
                    },
                    description: 'Function-specific options (when type = function)'
                  },
                  fileOptions: {
                    type: 'object',
                    properties: {
                      includeDetailedMetrics: {
                        type: 'boolean',
                        description: 'Include detailed function-level metrics'
                      },
                      excludeTests: {
                        type: 'boolean',
                        description: 'Exclude test files from analysis'
                      },
                      excludePatterns: {
                        type: 'array',
                        items: { type: 'string' },
                        description: 'Custom file patterns to exclude'
                      }
                    },
                    description: 'File analysis options (when type = file/files)'
                  },
                  commitOptions: {
                    type: 'object',
                    properties: {
                      compareWith: {
                        type: 'string',
                        description: 'Compare against specific commit (default: previous commit)'
                      },
                      includeImpactAnalysis: {
                        type: 'boolean',
                        description: 'Include impact analysis'
                      },
                      changedFilesOnly: {
                        type: 'boolean',
                        description: 'Only analyze changed files'
                      }
                    },
                    description: 'Commit analysis options (when type = commit)'
                  },
                  format: {
                    type: 'object',
                    properties: {
                      includeRawMetrics: {
                        type: 'boolean',
                        description: 'Include raw metrics data'
                      },
                      includeChartData: {
                        type: 'boolean',
                        description: 'Include visualization data'
                      },
                      groupBy: {
                        type: 'string',
                        enum: ['file', 'function', 'class', 'none'],
                        description: 'Group results by file/function/class'
                      }
                    },
                    description: 'Output formatting options'
                  }
                },
                description: 'Optional analysis configuration'
              }
            },
            required: ['target', 'type']
          }
        },
        {
          name: 'complexity_insights',
          description: 'Unified complexity insights tool - replaces complexity_get_dashboard, complexity_get_hotspots, complexity_get_trends, complexity_get_technical_debt, and complexity_get_refactoring_opportunities',
          inputSchema: {
            type: 'object',
            properties: {
              view: {
                type: 'string',
                enum: ['dashboard', 'hotspots', 'trends', 'debt', 'refactoring'],
                description: 'Type of insights to retrieve'
              },
              filters: {
                type: 'object',
                properties: {
                  projectId: {
                    type: 'string',
                    description: 'Project ID for scoping'
                  },
                  timeRange: {
                    type: 'object',
                    properties: {
                      startDate: { type: 'string', description: 'ISO date string' },
                      endDate: { type: 'string', description: 'ISO date string' },
                      period: {
                        type: 'string',
                        enum: ['day', 'week', 'month', 'quarter', 'year'],
                        description: 'Time period for trends and historical data'
                      }
                    },
                    description: 'Time range for trends and historical data'
                  },
                  thresholds: {
                    type: 'object',
                    properties: {
                      minComplexity: { type: 'number', minimum: 0, description: 'Minimum complexity threshold' },
                      maxComplexity: { type: 'number', minimum: 0, description: 'Maximum complexity threshold' },
                      riskLevels: {
                        type: 'array',
                        items: {
                          type: 'string',
                          enum: ['very_low', 'low', 'moderate', 'high', 'very_high', 'critical']
                        },
                        description: 'Risk levels to filter by'
                      }
                    },
                    description: 'Complexity thresholds for filtering'
                  },
                  dashboardOptions: {
                    type: 'object',
                    properties: {
                      includeHotspots: { type: 'boolean', description: 'Include hotspots in dashboard' },
                      includeAlerts: { type: 'boolean', description: 'Include alerts in dashboard' },
                      includeOpportunities: { type: 'boolean', description: 'Include refactoring opportunities' },
                      includeTrends: { type: 'boolean', description: 'Include trend indicators' }
                    },
                    description: 'Dashboard-specific options'
                  },
                  hotspotOptions: {
                    type: 'object',
                    properties: {
                      minHotspotScore: { type: 'number', minimum: 0, maximum: 1, description: 'Minimum hotspot score (0-1)' },
                      hotspotTypes: {
                        type: 'array',
                        items: {
                          type: 'string',
                          enum: ['high_complexity', 'frequent_changes', 'combined_risk', 'coupling_hotspot']
                        },
                        description: 'Types of hotspots to detect'
                      },
                      limit: { type: 'number', minimum: 1, description: 'Maximum number of hotspots to return' },
                      sortBy: {
                        type: 'string',
                        enum: ['complexity', 'change_frequency', 'hotspot_score', 'risk_level'],
                        description: 'Sort order for hotspots'
                      }
                    },
                    description: 'Hotspots-specific options'
                  },
                  trendsOptions: {
                    type: 'object',
                    properties: {
                      metrics: {
                        type: 'array',
                        items: {
                          type: 'string',
                          enum: ['cyclomatic', 'cognitive', 'halstead', 'coupling', 'maintainability']
                        },
                        description: 'Metrics to include in trend analysis'
                      },
                      includeForecast: { type: 'boolean', description: 'Include forecasting data' },
                      forecastPeriods: { type: 'number', minimum: 1, description: 'Number of periods to forecast' }
                    },
                    description: 'Trends-specific options'
                  },
                  debtOptions: {
                    type: 'object',
                    properties: {
                      calculationMethod: {
                        type: 'string',
                        enum: ['conservative', 'aggressive', 'balanced'],
                        description: 'Debt calculation method'
                      },
                      includeRemediation: { type: 'boolean', description: 'Include remediation estimates' },
                      groupBy: {
                        type: 'string',
                        enum: ['file', 'function', 'class', 'component', 'severity'],
                        description: 'Group debt by category'
                      }
                    },
                    description: 'Technical debt-specific options'
                  },
                  refactoringOptions: {
                    type: 'object',
                    properties: {
                      minRoiScore: { type: 'number', minimum: 0, description: 'Minimum ROI score for opportunities' },
                      maxEffortHours: { type: 'number', minimum: 1, description: 'Maximum effort hours to consider' },
                      opportunityTypes: {
                        type: 'array',
                        items: {
                          type: 'string',
                          enum: ['extract_method', 'split_function', 'reduce_nesting', 'eliminate_duplication', 'simplify_conditionals', 'reduce_parameters', 'break_dependencies', 'improve_cohesion']
                        },
                        description: 'Opportunity types to include'
                      },
                      sortBy: {
                        type: 'string',
                        enum: ['priority', 'roi', 'effort', 'complexity_reduction'],
                        description: 'Sort opportunities by priority'
                      },
                      limit: { type: 'number', minimum: 1, description: 'Maximum number of opportunities to return' }
                    },
                    description: 'Refactoring-specific options'
                  }
                },
                description: 'Optional insight configuration filters'
              }
            },
            required: ['view']
          }
        },
        {
          name: 'complexity_manage',
          description: 'Unified complexity management tool - replaces complexity_start_tracking, complexity_stop_tracking, complexity_get_alerts, complexity_acknowledge_alert, complexity_resolve_alert, complexity_set_thresholds, and complexity_get_performance',
          inputSchema: {
            type: 'object',
            properties: {
              action: {
                type: 'string',
                enum: ['start', 'stop', 'alerts', 'acknowledge', 'resolve', 'thresholds', 'performance'],
                description: 'Management action to perform'
              },
              params: {
                type: 'object',
                properties: {
                  projectId: {
                    type: 'string',
                    description: 'Project ID for scoping operations'
                  },
                  alertParams: {
                    type: 'object',
                    properties: {
                      alertId: {
                        type: 'string',
                        description: 'Alert ID for acknowledge/resolve actions'
                      },
                      alertIds: {
                        type: 'array',
                        items: { type: 'string' },
                        description: 'Multiple alert IDs for batch operations'
                      },
                      notes: {
                        type: 'string',
                        description: 'Acknowledgment/resolution notes'
                      },
                      userId: {
                        type: 'string',
                        description: 'User performing the action'
                      },
                      filters: {
                        type: 'object',
                        properties: {
                          severity: {
                            type: 'array',
                            items: {
                              type: 'string',
                              enum: ['info', 'warning', 'error', 'critical']
                            },
                            description: 'Filter alerts by severity'
                          },
                          type: {
                            type: 'array',
                            items: {
                              type: 'string',
                              enum: ['threshold_exceeded', 'complexity_regression', 'hotspot_detected', 'technical_debt_spike']
                            },
                            description: 'Filter alerts by type'
                          },
                          filePath: {
                            type: 'string',
                            description: 'Filter alerts by file path'
                          },
                          dateRange: {
                            type: 'object',
                            properties: {
                              startDate: { type: 'string', description: 'Start date (ISO format)' },
                              endDate: { type: 'string', description: 'End date (ISO format)' }
                            },
                            description: 'Filter alerts by date range'
                          }
                        },
                        description: 'Filter criteria for alerts'
                      }
                    },
                    description: 'Alert management parameters'
                  },
                  thresholdParams: {
                    type: 'object',
                    properties: {
                      cyclomaticComplexityThresholds: {
                        type: 'object',
                        properties: {
                          low: { type: 'number', minimum: 1, description: 'Low complexity threshold' },
                          moderate: { type: 'number', minimum: 1, description: 'Moderate complexity threshold' },
                          high: { type: 'number', minimum: 1, description: 'High complexity threshold' },
                          veryHigh: { type: 'number', minimum: 1, description: 'Very high complexity threshold' },
                          critical: { type: 'number', minimum: 1, description: 'Critical complexity threshold' }
                        },
                        description: 'Cyclomatic complexity thresholds'
                      },
                      cognitiveComplexityThresholds: {
                        type: 'object',
                        properties: {
                          low: { type: 'number', minimum: 1 },
                          moderate: { type: 'number', minimum: 1 },
                          high: { type: 'number', minimum: 1 },
                          veryHigh: { type: 'number', minimum: 1 },
                          critical: { type: 'number', minimum: 1 }
                        },
                        description: 'Cognitive complexity thresholds'
                      },
                      halsteadEffortThresholds: {
                        type: 'object',
                        properties: {
                          low: { type: 'number', minimum: 1 },
                          moderate: { type: 'number', minimum: 1 },
                          high: { type: 'number', minimum: 1 },
                          veryHigh: { type: 'number', minimum: 1 },
                          critical: { type: 'number', minimum: 1 }
                        },
                        description: 'Halstead effort thresholds'
                      },
                      couplingThresholds: {
                        type: 'object',
                        properties: {
                          low: { type: 'number', minimum: 0, maximum: 1 },
                          moderate: { type: 'number', minimum: 0, maximum: 1 },
                          high: { type: 'number', minimum: 0, maximum: 1 },
                          veryHigh: { type: 'number', minimum: 0, maximum: 1 },
                          critical: { type: 'number', minimum: 0, maximum: 1 }
                        },
                        description: 'Coupling thresholds'
                      },
                      alertConfiguration: {
                        type: 'object',
                        properties: {
                          alertOnThresholdBreach: { type: 'boolean', description: 'Enable threshold breach alerts' },
                          alertOnComplexityRegression: { type: 'number', minimum: 5, maximum: 100, description: 'Percentage increase to trigger regression alert' },
                          alertOnHotspotDetection: { type: 'boolean', description: 'Enable hotspot detection alerts' }
                        },
                        description: 'Alert configuration settings'
                      },
                      hotspotConfiguration: {
                        type: 'object',
                        properties: {
                          hotspotMinComplexity: { type: 'number', minimum: 0, description: 'Minimum complexity for hotspot detection' },
                          hotspotMinChangeFrequency: { type: 'number', minimum: 0, description: 'Minimum change frequency for hotspot detection' },
                          hotspotChangeTimeFrameDays: { type: 'number', minimum: 1, description: 'Time frame in days for change frequency calculation' }
                        },
                        description: 'Hotspot detection configuration'
                      }
                    },
                    description: 'Threshold configuration parameters'
                  },
                  trackingParams: {
                    type: 'object',
                    properties: {
                      enableRealTimeAnalysis: { type: 'boolean', description: 'Enable real-time complexity analysis' },
                      enableBatchProcessing: { type: 'boolean', description: 'Enable batch processing of complexity analysis' },
                      analysisTimeoutMs: { type: 'number', minimum: 1000, description: 'Analysis timeout in milliseconds' },
                      maxFilesPerBatch: { type: 'number', minimum: 1, description: 'Maximum files per batch analysis' },
                      autoAnalyzeOnCommit: { type: 'boolean', description: 'Automatically analyze complexity on git commits' },
                      scheduledAnalysisIntervalMs: { type: 'number', minimum: 60000, description: 'Interval for scheduled analysis in milliseconds' },
                      supportedFileTypes: {
                        type: 'array',
                        items: { type: 'string' },
                        description: 'File types to include in analysis'
                      },
                      excludePatterns: {
                        type: 'array',
                        items: { type: 'string' },
                        description: 'File patterns to exclude from analysis'
                      }
                    },
                    description: 'Tracking configuration parameters'
                  },
                  performanceParams: {
                    type: 'object',
                    properties: {
                      includeDetailedTiming: { type: 'boolean', description: 'Include detailed timing breakdown' },
                      includeMemoryStats: { type: 'boolean', description: 'Include memory usage statistics' },
                      includeQualityMetrics: { type: 'boolean', description: 'Include analysis quality metrics' },
                      timeRange: {
                        type: 'object',
                        properties: {
                          startDate: { type: 'string', description: 'Start date for performance data (ISO format)' },
                          endDate: { type: 'string', description: 'End date for performance data (ISO format)' }
                        },
                        description: 'Time range for performance data'
                      }
                    },
                    description: 'Performance monitoring parameters'
                  }
                },
                description: 'Action-specific parameters'
              }
            },
            required: ['action']
          }
        }
];

