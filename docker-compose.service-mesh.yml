# AIDIS Service Mesh Configuration with Traefik
# Enhanced Docker Compose with service discovery and load balancing

version: '3.8'

services:
  # Traefik API Gateway and Load Balancer
  traefik:
    image: traefik:v3.0
    container_name: aidis-gateway
    restart: unless-stopped
    command:
      - --api.dashboard=true
      - --api.insecure=true  # For development only
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --metrics.prometheus=true
      - --log.level=INFO
      - --accesslog=true
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_data:/data
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`traefik.aidis.local`)"
      - "traefik.http.routers.dashboard.service=api@internal"
    networks:
      - aidis-mesh
    healthcheck:
      test: ["CMD", "traefik", "healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for BullMQ queue system
  aidis-redis:
    image: redis:7-alpine
    container_name: aidis-redis
    restart: unless-stopped
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    labels:
      - "traefik.enable=false"  # Internal service, no external routing
    networks:
      - aidis-mesh
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL database
  aidis-postgres:
    image: postgres:16-alpine
    container_name: aidis-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: aidis_production
      POSTGRES_USER: ridgetop
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    labels:
      - "traefik.enable=false"  # Internal service, no external routing
    networks:
      - aidis-mesh
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ridgetop -d aidis_production"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AIDIS MCP Server with service mesh integration
  aidis-mcp-server:
    build:
      context: ./mcp-server
      dockerfile: Dockerfile
    container_name: aidis-mcp-server
    restart: unless-stopped
    environment:
      NODE_ENV: production
      AIDIS_LOG_LEVEL: info
      DATABASE_URL: postgresql://ridgetop:${POSTGRES_PASSWORD:-}@aidis-postgres:5432/aidis_production
      REDIS_URL: redis://aidis-redis:6379
    depends_on:
      aidis-postgres:
        condition: service_healthy
      aidis-redis:
        condition: service_healthy
    volumes:
      - mcp_logs:/app/logs
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mcp-server.rule=Host(`mcp.aidis.local`) || PathPrefix(`/mcp`)"
      - "traefik.http.routers.mcp-server.service=mcp-server"
      - "traefik.http.services.mcp-server.loadbalancer.server.port=8080"
      - "traefik.http.middlewares.mcp-healthcheck.healthcheck.path=/healthz"
      - "traefik.http.routers.mcp-server.middlewares=mcp-healthcheck"
    networks:
      - aidis-mesh
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # AIDIS Command Backend with load balancing
  aidis-command-backend:
    build:
      context: ./aidis-command/backend
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgresql://ridgetop:${POSTGRES_PASSWORD:-}@aidis-postgres:5432/aidis_production
      MCP_SERVER_URL: http://aidis-mcp-server:8080
    depends_on:
      aidis-postgres:
        condition: service_healthy
      aidis-mcp-server:
        condition: service_healthy
    volumes:
      - backend_logs:/app/logs
      - backend_uploads:/app/uploads
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api-backend.rule=Host(`api.aidis.local`) || PathPrefix(`/api`)"
      - "traefik.http.routers.api-backend.service=api-backend"
      - "traefik.http.services.api-backend.loadbalancer.server.port=3001"
      - "traefik.http.middlewares.api-healthcheck.healthcheck.path=/health"
      - "traefik.http.routers.api-backend.middlewares=api-healthcheck"
      # Load balancing configuration
      - "traefik.http.services.api-backend.loadbalancer.healthcheck.path=/health"
      - "traefik.http.services.api-backend.loadbalancer.healthcheck.interval=30s"
    networks:
      - aidis-mesh
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    # Scale this service for load balancing testing
    deploy:
      replicas: 2

  # AIDIS Command Frontend with service mesh routing
  aidis-command-frontend:
    build:
      context: ./aidis-command/frontend
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      - aidis-command-backend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`aidis.local`) || Host(`localhost`)"
      - "traefik.http.routers.frontend.service=frontend"
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"
      - "traefik.http.routers.frontend.priority=1"  # Lower priority than API routes
      # Static asset optimization
      - "traefik.http.middlewares.frontend-compress.compress=true"
      - "traefik.http.middlewares.frontend-cache.headers.customRequestHeaders.Cache-Control=public, max-age=3600"
      - "traefik.http.routers.frontend.middlewares=frontend-compress,frontend-cache"
    networks:
      - aidis-mesh
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  traefik_data:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  mcp_logs:
    driver: local
  backend_logs:
    driver: local
  backend_uploads:
    driver: local

networks:
  aidis-mesh:
    driver: bridge
    name: aidis-service-mesh
    ipam:
      config:
        - subnet: 172.20.0.0/16
    labels:
      - "traefik.enable=false"

# Service mesh configuration
x-service-mesh-config: &service-mesh-config
  - service_discovery: "docker"
  - load_balancing: "round_robin"
  - health_checks: "enabled"
  - circuit_breaker: "enabled"
  - retry_policy: "exponential_backoff"
  - observability: "prometheus_metrics"