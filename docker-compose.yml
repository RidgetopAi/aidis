# AIDIS Docker Compose Configuration
# Optimized container orchestration for all services

version: '3.8'

services:
  # Redis for BullMQ queue system
  aidis-redis:
    image: redis:7-alpine
    container_name: aidis-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - aidis-network

  # PostgreSQL database
  aidis-postgres:
    image: postgres:16-alpine
    container_name: aidis-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: aidis_production
      POSTGRES_USER: ridgetop
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ridgetop -d aidis_production"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - aidis-network

  # AIDIS MCP Server
  aidis-mcp-server:
    build:
      context: ./mcp-server
      dockerfile: Dockerfile
    container_name: aidis-mcp-server
    restart: unless-stopped
    environment:
      NODE_ENV: production
      AIDIS_LOG_LEVEL: info
      DATABASE_URL: postgresql://ridgetop:${POSTGRES_PASSWORD:-}@aidis-postgres:5432/aidis_production
      REDIS_URL: redis://aidis-redis:6379
    ports:
      - "8080:8080"
    depends_on:
      aidis-postgres:
        condition: service_healthy
      aidis-redis:
        condition: service_healthy
    volumes:
      - mcp_logs:/app/logs
    networks:
      - aidis-network

  # AIDIS Command Backend
  aidis-command-backend:
    build:
      context: ./aidis-command/backend
      dockerfile: Dockerfile
    container_name: aidis-command-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgresql://ridgetop:${POSTGRES_PASSWORD:-}@aidis-postgres:5432/aidis_production
      MCP_SERVER_URL: http://aidis-mcp-server:8080
    ports:
      - "3001:3001"
    depends_on:
      aidis-postgres:
        condition: service_healthy
      aidis-mcp-server:
        condition: service_started
    volumes:
      - backend_logs:/app/logs
      - backend_uploads:/app/uploads
    networks:
      - aidis-network

  # AIDIS Command Frontend
  aidis-command-frontend:
    build:
      context: ./aidis-command/frontend
      dockerfile: Dockerfile
    container_name: aidis-command-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    depends_on:
      - aidis-command-backend
    networks:
      - aidis-network

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  mcp_logs:
    driver: local
  backend_logs:
    driver: local
  backend_uploads:
    driver: local

networks:
  aidis-network:
    driver: bridge

# Resource limits for optimization
x-resource-limits: &resource-limits
  deploy:
    resources:
      limits:
        memory: 512M
      reservations:
        memory: 256M